name: PromptExpert v2

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process-expert-command:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@promptexpert')
    runs-on: ubuntu-latest
    steps:
      - name: Parse command
        id: parse
        run: |
          COMMENT='${{ github.event.comment.body }}'
          
          # Extract expert name and instructions
          # Format: @promptexpert <expert> <instructions...>
          if [[ "$COMMENT" =~ @promptexpert[[:space:]]+([a-zA-Z-]+)[[:space:]]+(.*) ]]; then
            EXPERT="${BASH_REMATCH[1]}"
            INSTRUCTIONS="${BASH_REMATCH[2]}"
            
            echo "expert=$EXPERT" >> $GITHUB_OUTPUT
            echo "instructions=$INSTRUCTIONS" >> $GITHUB_OUTPUT
            echo "valid=true" >> $GITHUB_OUTPUT
            
            echo "Parsed command:"
            echo "  Expert: $EXPERT"
            echo "  Instructions: $INSTRUCTIONS"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Post invalid command message
        if: steps.parse.outputs.valid != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚ùå Invalid command format. Use: `@promptexpert <domain> --suggest:"your suggestion"`'
            });
            
      - name: Checkout PR
        if: steps.parse.outputs.valid == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ format('refs/pull/{0}/head', github.event.issue.number) }}
          fetch-depth: 0
          
      - name: Setup Node.js
        if: steps.parse.outputs.valid == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        if: steps.parse.outputs.valid == 'true'
        run: |
          npm init -y
          npm install @anthropic-ai/sdk @octokit/rest
          
      - name: Gather PR context
        if: steps.parse.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Get PR files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Get recent comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Get commits
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Save context
            const context_data = {
              pr: {
                title: pr.data.title,
                body: pr.data.body,
                state: pr.data.state,
                author: pr.data.user.login,
                created_at: pr.data.created_at,
                updated_at: pr.data.updated_at,
                base_branch: pr.data.base.ref,
                head_branch: pr.data.head.ref
              },
              files: files.data.map(f => ({
                filename: f.filename,
                status: f.status,
                additions: f.additions,
                deletions: f.deletions,
                changes: f.changes,
                patch: f.patch
              })),
              comments: comments.data.map(c => ({
                author: c.user.login,
                body: c.body,
                created_at: c.created_at
              })),
              commits: commits.data.map(c => ({
                sha: c.sha,
                author: c.commit.author.name,
                message: c.commit.message,
                date: c.commit.author.date
              }))
            };
            
            fs.writeFileSync('pr-context.json', JSON.stringify(context_data, null, 2));
            console.log('PR context saved');
            
      - name: Get PR branch name
        if: steps.parse.outputs.valid == 'true'
        id: pr_branch
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return pr.data.head.ref;
            
      - name: Run PromptExpert handler
        if: steps.parse.outputs.valid == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          EXPERT: ${{ steps.parse.outputs.expert }}
          INSTRUCTIONS: ${{ steps.parse.outputs.instructions }}
          PR_NUMBER: ${{ github.event.issue.number }}
          GITHUB_HEAD_REF: ${{ steps.pr_branch.outputs.result }}
        run: |
          node .github/scripts/promptexpert-handler.js