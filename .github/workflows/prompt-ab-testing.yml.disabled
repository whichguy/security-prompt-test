name: Prompt A/B Testing

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.md'
      - '**/*prompt*'
      - '.claude-ab-tests/**'

permissions:
  contents: read
  pull-requests: write
  statuses: write
  id-token: write  # Required for OIDC token authentication

jobs:
  ab-test:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create directories
        run: |
          mkdir -p .claude-ab-tests/test-results
      
      - name: Clone Expert Bank
        run: |
          git clone https://github.com/whichguy/prompt-expert-bank.git /tmp/expert-bank
          
      - name: Debug - Show structure
        run: |
          echo "=== Repository structure ==="
          ls -la
          echo "=== Expert bank structure ==="
          ls -la /tmp/expert-bank/prompt-experts/
          echo "=== Changed files ==="
          git diff --name-only origin/${{ github.base_ref }}...HEAD
      
      - name: Run A/B Test with Claude
        id: test
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-3-5-sonnet-20241022
          max_turns: 3
          timeout_minutes: 10
          allowed_tools: |
            - str_replace_editor
          prompt: |
            You are conducting a Result-Focused Prompt A/B Test.
            
            ## Your Mission:
            1. Identify changed prompt files using git diff
            2. Load appropriate expert from /tmp/expert-bank/prompt-experts/
            3. Run OLD vs NEW prompts through test scenarios
            4. Evaluate OUTPUTS using expert framework
            5. Write results to .claude-ab-tests/test-results/report.md
            
            ## Process:
            
            1. First, identify what changed:
               Run: git diff origin/${{ github.base_ref }}...HEAD --name-only | grep -E '\.(md|prompt|txt)$'
               Look for files in prompts/ directory
            
            2. Based on file content, select expert:
               - Security/Command terms ‚Üí security_command_expert.md
               - Financial terms ‚Üí financial_analysis_expert.md
               - GAS/Script terms ‚Üí gas_javascript_expert.md
               - Data/Analysis ‚Üí data_analysis_expert.md
               - Default ‚Üí general_purpose_expert.md
            
            3. For security prompts, use test cases from test-cases.md if available
            
            4. Run both OLD and NEW prompts through scenarios
            
            5. Score outputs using expert's weighted competencies
            
            6. Generate report and save to .claude-ab-tests/test-results/report.md with:
               - Overall recommendation (APPROVE/REJECT/NEEDS_REVISION)
               - Competency scores with specific examples
               - Key improvements and issues
               - Actionable feedback
            
            IMPORTANT: Use str_replace_editor to create the report file at .claude-ab-tests/test-results/report.md
            
            Focus on OUTPUT QUALITY, not prompt structure!
      
      - name: Check if report exists
        run: |
          if [ -f .claude-ab-tests/test-results/report.md ]; then
            echo "Report found!"
            cat .claude-ab-tests/test-results/report.md
          else
            echo "No report found at expected location"
            find . -name "report.md" -type f
          fi
      
      - name: Post Results to PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = '.claude-ab-tests/test-results/report.md';
            
            console.log('Checking for report at:', reportPath);
            
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              console.log('Report found, length:', report.length);
              
              // Extract key info
              const rec = report.match(/Recommendation:\s*\*?\*?([^*\n]+)/)?.[1]?.trim() || 'UNKNOWN';
              const confidence = report.match(/Confidence:\s*([^\n]+)/)?.[1] || 'N/A';
              
              // Create concise comment
              let comment = `## üß™ A/B Test Results\n\n`;
              comment += `**Recommendation:** ${rec}\n`;
              comment += `**Confidence:** ${confidence}\n\n`;
              
              if (rec.includes('APPROVE')) {
                comment += `‚úÖ This prompt change improves output quality and is ready to merge.\n\n`;
              } else if (rec.includes('REJECT')) {
                comment += `‚ùå This prompt change reduces output quality and should not be merged.\n\n`;
              } else {
                comment += `‚ö†Ô∏è This prompt change needs revision before merging.\n\n`;
              }
              
              // Add summary
              const summary = report.match(/## Summary\n([^#]+)/)?.[1]?.trim() || 
                             report.substring(0, 500) + '...';
              comment += summary + '\n\n';
              
              comment += `[üìÑ View Full Report](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/files)\n`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: comment
              });
              
              // Set status check
              const state = rec.includes('APPROVE') ? 'success' : 
                           rec.includes('REJECT') ? 'failure' : 'pending';
              
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.name,
                sha: context.sha,
                state: state,
                description: `Prompt Quality: ${rec}`,
                context: 'prompt-ab-test'
              });
            } else {
              console.log('No report found at', reportPath);
              
              // Post a comment about the issue
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: '‚ö†Ô∏è A/B test completed but no report was generated. Check the action logs for details.'
              });
            }
      
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ab-test-results
          path: .claude-ab-tests/test-results/
          if-no-files-found: warn