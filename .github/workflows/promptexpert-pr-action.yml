name: PromptExpert Command Handler

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  issue_comment:
    types: [created]

jobs:
  promptexpert-action:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@promptexpert')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.issue.pull_request && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install @anthropic-ai/sdk@0.24.0 @octokit/rest@19.0.0

      - name: Process PromptExpert Command
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > process-command.js << 'EOF'
          const { Anthropic } = require('@anthropic-ai/sdk');
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs').promises;
          const path = require('path');
          
          async function processCommand() {
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });
            
            const comment = process.env.COMMENT_BODY;
            const issueNumber = parseInt(process.env.ISSUE_NUMBER);
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            
            console.log(`Processing command in PR #${issueNumber}`);
            console.log(`Repository: ${owner}/${repo}`);
            console.log(`Comment author: ${process.env.COMMENT_AUTHOR}`);
            console.log(`Full comment: ${comment}`);
            
            // Parse command: @promptexpert <domain> --suggest:"suggestion text"
            const commandMatch = comment.match(/@promptexpert\s+(\w+)\s+--suggest:\s*"([^"]+)"/i);
            
            // Also check for common mistakes
            const partialMatch = comment.match(/@promptexpert\s+(.+)/i);
            
            if (!commandMatch) {
              let debugInfo = '';
              
              if (partialMatch) {
                const fullCommand = partialMatch[1];
                debugInfo = `\n\n**Debug Information:**\n`;
                debugInfo += `- Received: \`@promptexpert ${fullCommand}\`\n`;
                
                // Check for missing domain
                if (fullCommand.startsWith('--suggest:')) {
                  debugInfo += `- Issue: Missing domain parameter\n`;
                  debugInfo += `- Expected format: \`@promptexpert <domain> --suggest:"text"\`\n`;
                }
                // Check for missing quotes
                else if (fullCommand.includes('--suggest:') && !fullCommand.includes('"')) {
                  debugInfo += `- Issue: Missing quotes around suggestion text\n`;
                  debugInfo += `- Suggestion text must be wrapped in double quotes\n`;
                }
                // Check for wrong flag format
                else if (fullCommand.includes('--') && !fullCommand.includes('--suggest:')) {
                  const flagMatch = fullCommand.match(/--(\w+)/);
                  if (flagMatch) {
                    debugInfo += `- Issue: Invalid flag \`--${flagMatch[1]}\`\n`;
                    debugInfo += `- Only \`--suggest:\` is supported\n`;
                  }
                }
                // Check for missing flag
                else if (!fullCommand.includes('--')) {
                  debugInfo += `- Issue: Missing \`--suggest:\` flag\n`;
                  debugInfo += `- The command requires the --suggest: flag followed by quoted text\n`;
                }
                else {
                  debugInfo += `- Issue: Unrecognized command format\n`;
                }
              } else {
                debugInfo = `\n\n**Debug Information:**\n`;
                debugInfo += `- Could not parse any arguments after @promptexpert\n`;
                debugInfo += `- Make sure to include both domain and suggestion\n`;
              }
              
              await octokit.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body: `❌ **Invalid PromptExpert Command Format**\n\n**Expected format:**\n\`\`\`\n@promptexpert <domain> --suggest:"your suggestion here"\n\`\`\`\n\n**Valid domains:** security, programming, data-analysis, financial, general\n\n**Example:**\n\`\`\`\n@promptexpert security --suggest:"Add risk scoring system and alternative command suggestions"\n\`\`\`${debugInfo}`
              });
              return;
            }
            
            const [, domain, suggestion] = commandMatch;
            
            // Validate domain
            const validDomains = ['security', 'programming', 'data-analysis', 'financial', 'general'];
            if (!validDomains.includes(domain.toLowerCase())) {
              await octokit.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body: `❌ **Invalid Domain Specified**\n\n**Received domain:** \`${domain}\`\n\n**Valid domains:**\n${validDomains.map(d => `- \`${d}\``).join('\n')}\n\n**Example:**\n\`\`\`\n@promptexpert security --suggest:"Add risk scoring system"\n\`\`\`\n\n**Note:** The domain should match the type of prompt you're improving (security, programming, etc.)`
              });
              return;
            }
            
            // Validate suggestion
            if (!suggestion || suggestion.trim().length < 10) {
              await octokit.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body: `❌ **Invalid Suggestion**\n\n**Issue:** Suggestion is too short or empty\n**Received:** "${suggestion || '(empty)'}"\n\n**Requirements:**\n- Suggestion must be at least 10 characters long\n- Provide clear, specific improvement instructions\n\n**Good example:**\n\`\`\`\n@promptexpert security --suggest:"Add a risk scoring system with severity levels (low, medium, high, critical) and include specific remediation steps for each identified vulnerability"\n\`\`\``
              });
              return;
            }
            
            // Get PR files
            const { data: files } = await octokit.pulls.listFiles({
              owner,
              repo,
              pull_number: issueNumber
            });
            
            const promptFiles = files.filter(f => 
              f.filename.includes('prompt') && 
              (f.filename.endsWith('.md') || f.filename.endsWith('.txt'))
            );
            
            if (promptFiles.length === 0) {
              await octokit.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body: '❌ No prompt files found in this PR'
              });
              return;
            }
            
            // Process the first prompt file
            const targetFile = promptFiles[0];
            const currentContent = await fs.readFile(targetFile.filename, 'utf-8');
            
            // Load the expert definition for context
            let expertContext = '';
            try {
              const expertDefPath = path.join(__dirname, '../../expert-definitions', `${domain}-expert.md`);
              console.log(`Attempting to load expert definition from: ${expertDefPath}`);
              expertContext = await fs.readFile(expertDefPath, 'utf-8');
              console.log(`Loaded ${domain} expert definition`);
            } catch (err) {
              console.log(`Could not load expert definition: ${err.message}`);
              expertContext = `You are a ${domain} expert focused on improving prompts in this domain.`;
            }
            
            // Use Claude to implement the suggestion
            const response = await anthropic.messages.create({
              model: 'claude-3-5-sonnet-20241022',
              max_tokens: 4000,
              messages: [{
                role: 'user',
                content: `## YOUR ROLE

You are a prompt engineering expert. Your task is to improve a prompt based on specific suggestions while maintaining its core purpose and structure.

## EXPERT KNOWLEDGE CONTEXT

Here is the expert definition for the ${domain} domain that guides evaluation criteria:

${expertContext}

## CURRENT PROMPT

Here is the current prompt implementation that needs improvement:

${currentContent}

## REQUESTED IMPROVEMENT

The user has requested this specific improvement:
"${suggestion}"

## YOUR TASK

Please rewrite the entire prompt incorporating the requested suggestion. Make sure to:
1. Maintain the overall structure and purpose of the original prompt
2. Fully implement the requested suggestion
3. Ensure the enhancement is well-integrated with existing content
4. Keep the prompt clear, effective, and aligned with ${domain} best practices
5. Address the evaluation criteria from the expert definition where relevant

Return ONLY the complete updated prompt content, no explanations or markdown code blocks.`
              }]
            });
            
            const updatedContent = response.content[0].text;
            
            // Write the updated content
            await fs.writeFile(targetFile.filename, updatedContent);
            
            // Commit and push changes
            const { execSync } = require('child_process');
            
            execSync('git config user.name "PromptExpert Bot"');
            execSync('git config user.email "promptexpert[bot]@users.noreply.github.com"');
            execSync(`git add ${targetFile.filename}`);
            execSync(`git commit -m "PromptExpert: Implement suggestion for ${domain} domain

Suggestion: ${suggestion}

Requested by: @${process.env.COMMENT_AUTHOR}"`);
            execSync('git push');
            
            await octokit.issues.createComment({
              owner,
              repo,
              issue_number: issueNumber,
              body: `✅ **PromptExpert Implementation Complete**\n\n**Domain**: ${domain}\n**File Updated**: \`${targetFile.filename}\`\n**Suggestion Applied**: "${suggestion}"\n\n**What happens next:**\n1. The evaluation workflow will automatically re-run\n2. The ${domain} expert will assess the updated prompt\n3. You'll receive a new evaluation report\n\n**Commit Details:**\n- Author: @${process.env.COMMENT_AUTHOR}\n- Implementation: PromptExpert Bot\n- Time: ${new Date().toISOString()}`
            });
          }
          
          processCommand().catch(async err => {
            console.error('Error:', err);
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            await octokit.issues.createComment({
              owner,
              repo,
              issue_number: parseInt(process.env.ISSUE_NUMBER),
              body: `❌ PromptExpert encountered an error: ${err.message}`
            });
            process.exit(1);
          });
          EOF
          
          COMMENT_BODY="${{ github.event.comment.body }}" \
          ISSUE_NUMBER="${{ github.event.issue.number }}" \
          COMMENT_AUTHOR="${{ github.event.comment.user.login }}" \
          node process-command.js